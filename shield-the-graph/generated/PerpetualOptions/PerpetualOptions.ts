// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class CloseOrder extends ethereum.Event {
  get params(): CloseOrder__Params {
    return new CloseOrder__Params(this);
  }
}

export class CloseOrder__Params {
  _event: CloseOrder;

  constructor(event: CloseOrder) {
    this._event = event;
  }

  get holder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get orderID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get state(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get isBuy(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }

  get name(): string {
    return this._event.parameters[5].value.toString();
  }

  get number(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get fundingFeePaid(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get openPrice(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get closePrice(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SetRiskFundAddr extends ethereum.Event {
  get params(): SetRiskFundAddr__Params {
    return new SetRiskFundAddr__Params(this);
  }
}

export class SetRiskFundAddr__Params {
  _event: SetRiskFundAddr;

  constructor(event: SetRiskFundAddr) {
    this._event = event;
  }

  get oldAddr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAddr(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Trade extends ethereum.Event {
  get params(): Trade__Params {
    return new Trade__Params(this);
  }
}

export class Trade__Params {
  _event: Trade;

  constructor(event: Trade) {
    this._event = event;
  }

  get holder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get orderID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get isBuy(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get name(): string {
    return this._event.parameters[4].value.toString();
  }

  get number(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get tradingFee(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get liquidationFee(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get fundingFee(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get fundingFeePaid(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }

  get openPrice(): BigInt {
    return this._event.parameters[10].value.toBigInt();
  }
}

export class Withdrawn extends ethereum.Event {
  get params(): Withdrawn__Params {
    return new Withdrawn__Params(this);
  }
}

export class Withdrawn__Params {
  _event: Withdrawn;

  constructor(event: Withdrawn) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PerpetualOptions__migrationInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getMigrationTime(): BigInt {
    return this.value0;
  }

  getRegulatedTime(): BigInt {
    return this.value1;
  }

  getInPeriodHours(): BigInt {
    return this.value2;
  }
}

export class PerpetualOptions__ordersResult {
  value0: Address;
  value1: Address;
  value2: boolean;
  value3: i32;
  value4: string;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;
  value11: BigInt;
  value12: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: boolean,
    value3: i32,
    value4: string,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt,
    value11: BigInt,
    value12: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
    this.value12 = value12;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3)),
    );
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    map.set("value12", ethereum.Value.fromUnsignedBigInt(this.value12));
    return map;
  }

  getHolder(): Address {
    return this.value0;
  }

  getToken(): Address {
    return this.value1;
  }

  getIsBuy(): boolean {
    return this.value2;
  }

  getState(): i32 {
    return this.value3;
  }

  getName(): string {
    return this.value4;
  }

  getAmount(): BigInt {
    return this.value5;
  }

  getTradingFee(): BigInt {
    return this.value6;
  }

  getLiquidationFee(): BigInt {
    return this.value7;
  }

  getFundingFee(): BigInt {
    return this.value8;
  }

  getFundingFeePaid(): BigInt {
    return this.value9;
  }

  getOpenPrice(): BigInt {
    return this.value10;
  }

  getStartTime(): BigInt {
    return this.value11;
  }

  getClosePrice(): BigInt {
    return this.value12;
  }
}

export class PerpetualOptions__userAccountResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getDepositAmount(): BigInt {
    return this.value0;
  }

  getAvailableAmount(): BigInt {
    return this.value1;
  }

  getLockedAmount(): BigInt {
    return this.value2;
  }
}

export class PerpetualOptions__getAccountInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: Array<BigInt>;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: Array<BigInt>,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigIntArray(this.value3));
    return map;
  }

  getAvailable(): BigInt {
    return this.value0;
  }

  getLocked(): BigInt {
    return this.value1;
  }

  getOrderAmount(): BigInt {
    return this.value2;
  }

  getOrderIDs(): Array<BigInt> {
    return this.value3;
  }
}

export class PerpetualOptions__getOrdersInfoResultInfoStruct extends ethereum.Tuple {
  get holder(): Address {
    return this[0].toAddress();
  }

  get token(): Address {
    return this[1].toAddress();
  }

  get isBuy(): boolean {
    return this[2].toBoolean();
  }

  get state(): i32 {
    return this[3].toI32();
  }

  get name(): string {
    return this[4].toString();
  }

  get amount(): BigInt {
    return this[5].toBigInt();
  }

  get tradingFee(): BigInt {
    return this[6].toBigInt();
  }

  get liquidationFee(): BigInt {
    return this[7].toBigInt();
  }

  get fundingFee(): BigInt {
    return this[8].toBigInt();
  }

  get fundingFeePaid(): BigInt {
    return this[9].toBigInt();
  }

  get openPrice(): BigInt {
    return this[10].toBigInt();
  }

  get startTime(): BigInt {
    return this[11].toBigInt();
  }

  get closePrice(): BigInt {
    return this[12].toBigInt();
  }
}

export class PerpetualOptions__queryOrdersInfoResultInfoStruct extends ethereum.Tuple {
  get holder(): Address {
    return this[0].toAddress();
  }

  get token(): Address {
    return this[1].toAddress();
  }

  get isBuy(): boolean {
    return this[2].toBoolean();
  }

  get state(): i32 {
    return this[3].toI32();
  }

  get name(): string {
    return this[4].toString();
  }

  get amount(): BigInt {
    return this[5].toBigInt();
  }

  get tradingFee(): BigInt {
    return this[6].toBigInt();
  }

  get liquidationFee(): BigInt {
    return this[7].toBigInt();
  }

  get fundingFee(): BigInt {
    return this[8].toBigInt();
  }

  get fundingFeePaid(): BigInt {
    return this[9].toBigInt();
  }

  get openPrice(): BigInt {
    return this[10].toBigInt();
  }

  get startTime(): BigInt {
    return this[11].toBigInt();
  }

  get closePrice(): BigInt {
    return this[12].toBigInt();
  }
}

export class PerpetualOptions extends ethereum.SmartContract {
  static bind(address: Address): PerpetualOptions {
    return new PerpetualOptions("PerpetualOptions", address);
  }

  assetsNameMapping(param0: string): Address {
    let result = super.call(
      "assetsNameMapping",
      "assetsNameMapping(string):(address)",
      [ethereum.Value.fromString(param0)],
    );

    return result[0].toAddress();
  }

  try_assetsNameMapping(param0: string): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "assetsNameMapping",
      "assetsNameMapping(string):(address)",
      [ethereum.Value.fromString(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  brokerPortion(): BigInt {
    let result = super.call("brokerPortion", "brokerPortion():(uint256)", []);

    return result[0].toBigInt();
  }

  try_brokerPortion(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "brokerPortion",
      "brokerPortion():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  buybackPortion(): BigInt {
    let result = super.call("buybackPortion", "buybackPortion():(uint256)", []);

    return result[0].toBigInt();
  }

  try_buybackPortion(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "buybackPortion",
      "buybackPortion():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fundingFeeRateMatrix(param0: BigInt): BigInt {
    let result = super.call(
      "fundingFeeRateMatrix",
      "fundingFeeRateMatrix(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_fundingFeeRateMatrix(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fundingFeeRateMatrix",
      "fundingFeeRateMatrix(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidationFeeRate(): BigInt {
    let result = super.call(
      "liquidationFeeRate",
      "liquidationFeeRate():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_liquidationFeeRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationFeeRate",
      "liquidationFeeRate():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  migrationInfo(param0: BigInt): PerpetualOptions__migrationInfoResult {
    let result = super.call(
      "migrationInfo",
      "migrationInfo(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new PerpetualOptions__migrationInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_migrationInfo(
    param0: BigInt,
  ): ethereum.CallResult<PerpetualOptions__migrationInfoResult> {
    let result = super.tryCall(
      "migrationInfo",
      "migrationInfo(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PerpetualOptions__migrationInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  migrationPeriod(): BigInt {
    let result = super.call(
      "migrationPeriod",
      "migrationPeriod():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_migrationPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "migrationPeriod",
      "migrationPeriod():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  orders(param0: BigInt): PerpetualOptions__ordersResult {
    let result = super.call(
      "orders",
      "orders(uint256):(address,address,bool,uint8,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new PerpetualOptions__ordersResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBoolean(),
      result[3].toI32(),
      result[4].toString(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt(),
      result[11].toBigInt(),
      result[12].toBigInt(),
    );
  }

  try_orders(
    param0: BigInt,
  ): ethereum.CallResult<PerpetualOptions__ordersResult> {
    let result = super.tryCall(
      "orders",
      "orders(uint256):(address,address,bool,uint8,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PerpetualOptions__ordersResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBoolean(),
        value[3].toI32(),
        value[4].toString(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt(),
        value[11].toBigInt(),
        value[12].toBigInt(),
      ),
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  riskFundAddr(): Address {
    let result = super.call("riskFundAddr", "riskFundAddr():(address)", []);

    return result[0].toAddress();
  }

  try_riskFundAddr(): ethereum.CallResult<Address> {
    let result = super.tryCall("riskFundAddr", "riskFundAddr():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userAccount(
    param0: Address,
    param1: Address,
  ): PerpetualOptions__userAccountResult {
    let result = super.call(
      "userAccount",
      "userAccount(address,address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );

    return new PerpetualOptions__userAccountResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_userAccount(
    param0: Address,
    param1: Address,
  ): ethereum.CallResult<PerpetualOptions__userAccountResult> {
    let result = super.tryCall(
      "userAccount",
      "userAccount(address,address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PerpetualOptions__userAccountResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  userOrderIDMapping(param0: BigInt): BigInt {
    let result = super.call(
      "userOrderIDMapping",
      "userOrderIDMapping(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_userOrderIDMapping(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userOrderIDMapping",
      "userOrderIDMapping(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userOrders(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "userOrders",
      "userOrders(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_userOrders(param0: Address, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userOrders",
      "userOrders(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  trade(
    _name: string,
    _token: Address,
    _maker: Address,
    _isBuy: boolean,
    _amount: BigInt,
    _slideDownPrice: BigInt,
    _slideUpPrice: BigInt,
    _deadline: BigInt,
  ): BigInt {
    let result = super.call(
      "trade",
      "trade(string,address,address,bool,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromAddress(_maker),
        ethereum.Value.fromBoolean(_isBuy),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_slideDownPrice),
        ethereum.Value.fromUnsignedBigInt(_slideUpPrice),
        ethereum.Value.fromUnsignedBigInt(_deadline),
      ],
    );

    return result[0].toBigInt();
  }

  try_trade(
    _name: string,
    _token: Address,
    _maker: Address,
    _isBuy: boolean,
    _amount: BigInt,
    _slideDownPrice: BigInt,
    _slideUpPrice: BigInt,
    _deadline: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "trade",
      "trade(string,address,address,bool,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromAddress(_maker),
        ethereum.Value.fromBoolean(_isBuy),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_slideDownPrice),
        ethereum.Value.fromUnsignedBigInt(_slideUpPrice),
        ethereum.Value.fromUnsignedBigInt(_deadline),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkOrderIsAtRisk(_orderID: BigInt): boolean {
    let result = super.call(
      "checkOrderIsAtRisk",
      "checkOrderIsAtRisk(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_orderID)],
    );

    return result[0].toBoolean();
  }

  try_checkOrderIsAtRisk(_orderID: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkOrderIsAtRisk",
      "checkOrderIsAtRisk(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_orderID)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getAccountInfo(
    _taker: Address,
    _token: Address,
  ): PerpetualOptions__getAccountInfoResult {
    let result = super.call(
      "getAccountInfo",
      "getAccountInfo(address,address):(uint256,uint256,uint256,uint256[])",
      [ethereum.Value.fromAddress(_taker), ethereum.Value.fromAddress(_token)],
    );

    return new PerpetualOptions__getAccountInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigIntArray(),
    );
  }

  try_getAccountInfo(
    _taker: Address,
    _token: Address,
  ): ethereum.CallResult<PerpetualOptions__getAccountInfoResult> {
    let result = super.tryCall(
      "getAccountInfo",
      "getAccountInfo(address,address):(uint256,uint256,uint256,uint256[])",
      [ethereum.Value.fromAddress(_taker), ethereum.Value.fromAddress(_token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PerpetualOptions__getAccountInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigIntArray(),
      ),
    );
  }

  checkOrder(_orderID: BigInt): BigInt {
    let result = super.call("checkOrder", "checkOrder(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_orderID),
    ]);

    return result[0].toBigInt();
  }

  try_checkOrder(_orderID: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("checkOrder", "checkOrder(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_orderID),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMaxAmount(_token: Address, _name: string, _isBuy: boolean): BigInt {
    let result = super.call(
      "getMaxAmount",
      "getMaxAmount(address,string,bool):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromString(_name),
        ethereum.Value.fromBoolean(_isBuy),
      ],
    );

    return result[0].toBigInt();
  }

  try_getMaxAmount(
    _token: Address,
    _name: string,
    _isBuy: boolean,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMaxAmount",
      "getMaxAmount(address,string,bool):(uint256)",
      [
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromString(_name),
        ethereum.Value.fromBoolean(_isBuy),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOrderLength(): BigInt {
    let result = super.call("getOrderLength", "getOrderLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getOrderLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOrderLength",
      "getOrderLength():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOrdersInfo(
    _start: BigInt,
    _limit: BigInt,
  ): Array<PerpetualOptions__getOrdersInfoResultInfoStruct> {
    let result = super.call(
      "getOrdersInfo",
      "getOrdersInfo(uint256,uint256):((address,address,bool,uint8,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_start),
        ethereum.Value.fromUnsignedBigInt(_limit),
      ],
    );

    return result[0].toTupleArray<PerpetualOptions__getOrdersInfoResultInfoStruct>();
  }

  try_getOrdersInfo(
    _start: BigInt,
    _limit: BigInt,
  ): ethereum.CallResult<
    Array<PerpetualOptions__getOrdersInfoResultInfoStruct>
  > {
    let result = super.tryCall(
      "getOrdersInfo",
      "getOrdersInfo(uint256,uint256):((address,address,bool,uint8,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_start),
        ethereum.Value.fromUnsignedBigInt(_limit),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<PerpetualOptions__getOrdersInfoResultInfoStruct>(),
    );
  }

  queryOrdersInfo(
    _ids: Array<BigInt>,
  ): Array<PerpetualOptions__queryOrdersInfoResultInfoStruct> {
    let result = super.call(
      "queryOrdersInfo",
      "queryOrdersInfo(uint256[]):((address,address,bool,uint8,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)[])",
      [ethereum.Value.fromUnsignedBigIntArray(_ids)],
    );

    return result[0].toTupleArray<PerpetualOptions__queryOrdersInfoResultInfoStruct>();
  }

  try_queryOrdersInfo(
    _ids: Array<BigInt>,
  ): ethereum.CallResult<
    Array<PerpetualOptions__queryOrdersInfoResultInfoStruct>
  > {
    let result = super.tryCall(
      "queryOrdersInfo",
      "queryOrdersInfo(uint256[]):((address,address,bool,uint8,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)[])",
      [ethereum.Value.fromUnsignedBigIntArray(_ids)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<PerpetualOptions__queryOrdersInfoResultInfoStruct>(),
    );
  }

  getFundingFeeRateMatrix(): Array<BigInt> {
    let result = super.call(
      "getFundingFeeRateMatrix",
      "getFundingFeeRateMatrix():(uint256[])",
      [],
    );

    return result[0].toBigIntArray();
  }

  try_getFundingFeeRateMatrix(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getFundingFeeRateMatrix",
      "getFundingFeeRateMatrix():(uint256[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _liquidityManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _riskFundAddr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _buybackAddr(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _brokerAddr(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _referral(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositForCall extends ethereum.Call {
  get inputs(): DepositForCall__Inputs {
    return new DepositForCall__Inputs(this);
  }

  get outputs(): DepositForCall__Outputs {
    return new DepositForCall__Outputs(this);
  }
}

export class DepositForCall__Inputs {
  _call: DepositForCall;

  constructor(call: DepositForCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _referral(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class DepositForCall__Outputs {
  _call: DepositForCall;

  constructor(call: DepositForCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class TradeCall extends ethereum.Call {
  get inputs(): TradeCall__Inputs {
    return new TradeCall__Inputs(this);
  }

  get outputs(): TradeCall__Outputs {
    return new TradeCall__Outputs(this);
  }
}

export class TradeCall__Inputs {
  _call: TradeCall;

  constructor(call: TradeCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _maker(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _isBuy(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get _amount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _slideDownPrice(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _slideUpPrice(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _deadline(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class TradeCall__Outputs {
  _call: TradeCall;

  constructor(call: TradeCall) {
    this._call = call;
  }

  get fundingFee(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CloseOrderCall extends ethereum.Call {
  get inputs(): CloseOrderCall__Inputs {
    return new CloseOrderCall__Inputs(this);
  }

  get outputs(): CloseOrderCall__Outputs {
    return new CloseOrderCall__Outputs(this);
  }
}

export class CloseOrderCall__Inputs {
  _call: CloseOrderCall;

  constructor(call: CloseOrderCall) {
    this._call = call;
  }

  get _orderID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _slideDownPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _slideUpPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CloseOrderCall__Outputs {
  _call: CloseOrderCall;

  constructor(call: CloseOrderCall) {
    this._call = call;
  }
}

export class CloseOrdersCall extends ethereum.Call {
  get inputs(): CloseOrdersCall__Inputs {
    return new CloseOrdersCall__Inputs(this);
  }

  get outputs(): CloseOrdersCall__Outputs {
    return new CloseOrdersCall__Outputs(this);
  }
}

export class CloseOrdersCall__Inputs {
  _call: CloseOrdersCall;

  constructor(call: CloseOrdersCall) {
    this._call = call;
  }

  get _ids(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _slideDownPrices(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _slideUpPrices(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class CloseOrdersCall__Outputs {
  _call: CloseOrdersCall;

  constructor(call: CloseOrdersCall) {
    this._call = call;
  }
}

export class MigrationContractCall extends ethereum.Call {
  get inputs(): MigrationContractCall__Inputs {
    return new MigrationContractCall__Inputs(this);
  }

  get outputs(): MigrationContractCall__Outputs {
    return new MigrationContractCall__Outputs(this);
  }
}

export class MigrationContractCall__Inputs {
  _call: MigrationContractCall;

  constructor(call: MigrationContractCall) {
    this._call = call;
  }

  get orderIDs(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class MigrationContractCall__Outputs {
  _call: MigrationContractCall;

  constructor(call: MigrationContractCall) {
    this._call = call;
  }
}

export class RiskControlCall extends ethereum.Call {
  get inputs(): RiskControlCall__Inputs {
    return new RiskControlCall__Inputs(this);
  }

  get outputs(): RiskControlCall__Outputs {
    return new RiskControlCall__Outputs(this);
  }
}

export class RiskControlCall__Inputs {
  _call: RiskControlCall;

  constructor(call: RiskControlCall) {
    this._call = call;
  }

  get _orderIDs(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class RiskControlCall__Outputs {
  _call: RiskControlCall;

  constructor(call: RiskControlCall) {
    this._call = call;
  }
}

export class SetLiquidityPoolCall extends ethereum.Call {
  get inputs(): SetLiquidityPoolCall__Inputs {
    return new SetLiquidityPoolCall__Inputs(this);
  }

  get outputs(): SetLiquidityPoolCall__Outputs {
    return new SetLiquidityPoolCall__Outputs(this);
  }
}

export class SetLiquidityPoolCall__Inputs {
  _call: SetLiquidityPoolCall;

  constructor(call: SetLiquidityPoolCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _pool(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetLiquidityPoolCall__Outputs {
  _call: SetLiquidityPoolCall;

  constructor(call: SetLiquidityPoolCall) {
    this._call = call;
  }
}

export class SetLiquidationFeeRateCall extends ethereum.Call {
  get inputs(): SetLiquidationFeeRateCall__Inputs {
    return new SetLiquidationFeeRateCall__Inputs(this);
  }

  get outputs(): SetLiquidationFeeRateCall__Outputs {
    return new SetLiquidationFeeRateCall__Outputs(this);
  }
}

export class SetLiquidationFeeRateCall__Inputs {
  _call: SetLiquidationFeeRateCall;

  constructor(call: SetLiquidationFeeRateCall) {
    this._call = call;
  }

  get _rate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLiquidationFeeRateCall__Outputs {
  _call: SetLiquidationFeeRateCall;

  constructor(call: SetLiquidationFeeRateCall) {
    this._call = call;
  }
}

export class AddOrUpdateUnderlyingAssetCall extends ethereum.Call {
  get inputs(): AddOrUpdateUnderlyingAssetCall__Inputs {
    return new AddOrUpdateUnderlyingAssetCall__Inputs(this);
  }

  get outputs(): AddOrUpdateUnderlyingAssetCall__Outputs {
    return new AddOrUpdateUnderlyingAssetCall__Outputs(this);
  }
}

export class AddOrUpdateUnderlyingAssetCall__Inputs {
  _call: AddOrUpdateUnderlyingAssetCall;

  constructor(call: AddOrUpdateUnderlyingAssetCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _underlyingAsset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddOrUpdateUnderlyingAssetCall__Outputs {
  _call: AddOrUpdateUnderlyingAssetCall;

  constructor(call: AddOrUpdateUnderlyingAssetCall) {
    this._call = call;
  }
}

export class SetMigrationPeriodCall extends ethereum.Call {
  get inputs(): SetMigrationPeriodCall__Inputs {
    return new SetMigrationPeriodCall__Inputs(this);
  }

  get outputs(): SetMigrationPeriodCall__Outputs {
    return new SetMigrationPeriodCall__Outputs(this);
  }
}

export class SetMigrationPeriodCall__Inputs {
  _call: SetMigrationPeriodCall;

  constructor(call: SetMigrationPeriodCall) {
    this._call = call;
  }

  get _migrationPeriod(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMigrationPeriodCall__Outputs {
  _call: SetMigrationPeriodCall;

  constructor(call: SetMigrationPeriodCall) {
    this._call = call;
  }
}

export class SetFundingFeeRateMatrixCall extends ethereum.Call {
  get inputs(): SetFundingFeeRateMatrixCall__Inputs {
    return new SetFundingFeeRateMatrixCall__Inputs(this);
  }

  get outputs(): SetFundingFeeRateMatrixCall__Outputs {
    return new SetFundingFeeRateMatrixCall__Outputs(this);
  }
}

export class SetFundingFeeRateMatrixCall__Inputs {
  _call: SetFundingFeeRateMatrixCall;

  constructor(call: SetFundingFeeRateMatrixCall) {
    this._call = call;
  }

  get _rates(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class SetFundingFeeRateMatrixCall__Outputs {
  _call: SetFundingFeeRateMatrixCall;

  constructor(call: SetFundingFeeRateMatrixCall) {
    this._call = call;
  }
}

export class SetRiskFundCall extends ethereum.Call {
  get inputs(): SetRiskFundCall__Inputs {
    return new SetRiskFundCall__Inputs(this);
  }

  get outputs(): SetRiskFundCall__Outputs {
    return new SetRiskFundCall__Outputs(this);
  }
}

export class SetRiskFundCall__Inputs {
  _call: SetRiskFundCall;

  constructor(call: SetRiskFundCall) {
    this._call = call;
  }

  get _riskFundAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRiskFundCall__Outputs {
  _call: SetRiskFundCall;

  constructor(call: SetRiskFundCall) {
    this._call = call;
  }
}
