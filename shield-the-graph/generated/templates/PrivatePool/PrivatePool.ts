// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AddLiquidity extends ethereum.Event {
  get params(): AddLiquidity__Params {
    return new AddLiquidity__Params(this);
  }
}

export class AddLiquidity__Params {
  _event: AddLiquidity;

  constructor(event: AddLiquidity) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AddMargin extends ethereum.Event {
  get params(): AddMargin__Params {
    return new AddMargin__Params(this);
  }
}

export class AddMargin__Params {
  _event: AddMargin;

  constructor(event: AddMargin) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get orderID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get margin(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class CloseInPrivatePool extends ethereum.Event {
  get params(): CloseInPrivatePool__Params {
    return new CloseInPrivatePool__Params(this);
  }
}

export class CloseInPrivatePool__Params {
  _event: CloseInPrivatePool;

  constructor(event: CloseInPrivatePool) {
    this._event = event;
  }

  get maker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get makerID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get orderID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get userProfit(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class MatchWithPrivatePool extends ethereum.Event {
  get params(): MatchWithPrivatePool__Params {
    return new MatchWithPrivatePool__Params(this);
  }
}

export class MatchWithPrivatePool__Params {
  _event: MatchWithPrivatePool;

  constructor(event: MatchWithPrivatePool) {
    this._event = event;
  }

  get orderID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get maker(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get makerID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get marginAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get marginFee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RiskInPrivatePool extends ethereum.Event {
  get params(): RiskInPrivatePool__Params {
    return new RiskInPrivatePool__Params(this);
  }
}

export class RiskInPrivatePool__Params {
  _event: RiskInPrivatePool;

  constructor(event: RiskInPrivatePool) {
    this._event = event;
  }

  get maker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get makerID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get orderID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get userProfit(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PrivatePool__accountResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;
  value6: boolean;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: boolean,
    value6: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    return map;
  }

  getHolder(): Address {
    return this.value0;
  }

  getAmount(): BigInt {
    return this.value1;
  }

  getAvailableAmount(): BigInt {
    return this.value2;
  }

  getLockedAmount(): BigInt {
    return this.value3;
  }

  getMarginFee(): BigInt {
    return this.value4;
  }

  getIsRejectOrder(): boolean {
    return this.value5;
  }

  getIsExclusive(): boolean {
    return this.value6;
  }
}

export class PrivatePool__lockedLiquidityResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: Address;
  value5: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: Address,
    value5: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }

  getOrderID(): BigInt {
    return this.value0;
  }

  getMarginAmount(): BigInt {
    return this.value1;
  }

  getMarginFee(): BigInt {
    return this.value2;
  }

  getChangePrice(): BigInt {
    return this.value3;
  }

  getMakerAddr(): Address {
    return this.value4;
  }

  getLocked(): boolean {
    return this.value5;
  }
}

export class PrivatePool__closeResult {
  value0: BigInt;
  value1: boolean;

  constructor(value0: BigInt, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }

  getUserProfit(): BigInt {
    return this.value0;
  }

  getIsAgreement(): boolean {
    return this.value1;
  }
}

export class PrivatePool__riskCloseResult {
  value0: boolean;
  value1: BigInt;
  value2: boolean;

  constructor(value0: boolean, value1: BigInt, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }

  getFlag(): boolean {
    return this.value0;
  }

  getUserProfit(): BigInt {
    return this.value1;
  }

  getIsAgreement(): boolean {
    return this.value2;
  }
}

export class PrivatePool__getMarginAmountResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getMarginAmount(): BigInt {
    return this.value0;
  }

  getMarginFee(): BigInt {
    return this.value1;
  }
}

export class PrivatePool__getMakerLiquidityOrdersResultListStruct extends ethereum.Tuple {
  get orderID(): BigInt {
    return this[0].toBigInt();
  }

  get marginAmount(): BigInt {
    return this[1].toBigInt();
  }

  get marginFee(): BigInt {
    return this[2].toBigInt();
  }

  get changePrice(): BigInt {
    return this[3].toBigInt();
  }

  get makerAddr(): Address {
    return this[4].toAddress();
  }

  get locked(): boolean {
    return this[5].toBoolean();
  }
}

export class PrivatePool__getMakerOrderListResultListStruct extends ethereum.Tuple {
  get orderID(): BigInt {
    return this[0].toBigInt();
  }

  get marginAmount(): BigInt {
    return this[1].toBigInt();
  }

  get marginFee(): BigInt {
    return this[2].toBigInt();
  }

  get changePrice(): BigInt {
    return this[3].toBigInt();
  }

  get makerAddr(): Address {
    return this[4].toAddress();
  }

  get locked(): boolean {
    return this[5].toBoolean();
  }
}

export class PrivatePool extends ethereum.SmartContract {
  static bind(address: Address): PrivatePool {
    return new PrivatePool("PrivatePool", address);
  }

  account(param0: Address): PrivatePool__accountResult {
    let result = super.call(
      "account",
      "account(address):(address,uint256,uint256,uint256,uint256,bool,bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return new PrivatePool__accountResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean(),
      result[6].toBoolean(),
    );
  }

  try_account(
    param0: Address,
  ): ethereum.CallResult<PrivatePool__accountResult> {
    let result = super.tryCall(
      "account",
      "account(address):(address,uint256,uint256,uint256,uint256,bool,bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PrivatePool__accountResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean(),
        value[6].toBoolean(),
      ),
    );
  }

  keeper(): Address {
    let result = super.call("keeper", "keeper():(address)", []);

    return result[0].toAddress();
  }

  try_keeper(): ethereum.CallResult<Address> {
    let result = super.tryCall("keeper", "keeper():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lockedLiquidity(param0: BigInt): PrivatePool__lockedLiquidityResult {
    let result = super.call(
      "lockedLiquidity",
      "lockedLiquidity(uint256):(uint256,uint256,uint256,uint256,address,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new PrivatePool__lockedLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBoolean(),
    );
  }

  try_lockedLiquidity(
    param0: BigInt,
  ): ethereum.CallResult<PrivatePool__lockedLiquidityResult> {
    let result = super.tryCall(
      "lockedLiquidity",
      "lockedLiquidity(uint256):(uint256,uint256,uint256,uint256,address,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PrivatePool__lockedLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBoolean(),
      ),
    );
  }

  makerExist(param0: Address): boolean {
    let result = super.call("makerExist", "makerExist(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_makerExist(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("makerExist", "makerExist(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  matchIds(param0: BigInt): BigInt {
    let result = super.call("matchIds", "matchIds(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBigInt();
  }

  try_matchIds(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("matchIds", "matchIds(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  publicPool(): Address {
    let result = super.call("publicPool", "publicPool():(address)", []);

    return result[0].toAddress();
  }

  try_publicPool(): ethereum.CallResult<Address> {
    let result = super.tryCall("publicPool", "publicPool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  riskFundAddr(): Address {
    let result = super.call("riskFundAddr", "riskFundAddr():(address)", []);

    return result[0].toAddress();
  }

  try_riskFundAddr(): ethereum.CallResult<Address> {
    let result = super.tryCall("riskFundAddr", "riskFundAddr():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenAddress(): Address {
    let result = super.call("tokenAddress", "tokenAddress():(address)", []);

    return result[0].toAddress();
  }

  try_tokenAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenAddress", "tokenAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalLockedLiquidity(): BigInt {
    let result = super.call(
      "totalLockedLiquidity",
      "totalLockedLiquidity():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalLockedLiquidity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalLockedLiquidity",
      "totalLockedLiquidity():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  underlyingName(): string {
    let result = super.call("underlyingName", "underlyingName():(string)", []);

    return result[0].toString();
  }

  try_underlyingName(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "underlyingName",
      "underlyingName():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  matchOrder(
    _id: BigInt,
    _marginAmount: BigInt,
    _marginFee: BigInt,
    _maker: Address,
  ): boolean {
    let result = super.call(
      "matchOrder",
      "matchOrder(uint256,uint256,uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromUnsignedBigInt(_marginAmount),
        ethereum.Value.fromUnsignedBigInt(_marginFee),
        ethereum.Value.fromAddress(_maker),
      ],
    );

    return result[0].toBoolean();
  }

  try_matchOrder(
    _id: BigInt,
    _marginAmount: BigInt,
    _marginFee: BigInt,
    _maker: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "matchOrder",
      "matchOrder(uint256,uint256,uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromUnsignedBigInt(_marginAmount),
        ethereum.Value.fromUnsignedBigInt(_marginFee),
        ethereum.Value.fromAddress(_maker),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  close(
    _id: BigInt,
    _profit: BigInt,
    _fundingFee: BigInt,
  ): PrivatePool__closeResult {
    let result = super.call(
      "close",
      "close(uint256,uint256,uint256):(uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromUnsignedBigInt(_profit),
        ethereum.Value.fromUnsignedBigInt(_fundingFee),
      ],
    );

    return new PrivatePool__closeResult(
      result[0].toBigInt(),
      result[1].toBoolean(),
    );
  }

  try_close(
    _id: BigInt,
    _profit: BigInt,
    _fundingFee: BigInt,
  ): ethereum.CallResult<PrivatePool__closeResult> {
    let result = super.tryCall(
      "close",
      "close(uint256,uint256,uint256):(uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromUnsignedBigInt(_profit),
        ethereum.Value.fromUnsignedBigInt(_fundingFee),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PrivatePool__closeResult(value[0].toBigInt(), value[1].toBoolean()),
    );
  }

  riskClose(
    _orderID: BigInt,
    _number: BigInt,
    _fundingFee: BigInt,
    _profit: BigInt,
    _openPrice: BigInt,
    _currPrice: BigInt,
    _liquidationFeeRate: BigInt,
  ): PrivatePool__riskCloseResult {
    let result = super.call(
      "riskClose",
      "riskClose(uint256,uint256,uint256,uint256,uint256,uint256,uint256):(bool,uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_orderID),
        ethereum.Value.fromUnsignedBigInt(_number),
        ethereum.Value.fromUnsignedBigInt(_fundingFee),
        ethereum.Value.fromUnsignedBigInt(_profit),
        ethereum.Value.fromUnsignedBigInt(_openPrice),
        ethereum.Value.fromUnsignedBigInt(_currPrice),
        ethereum.Value.fromUnsignedBigInt(_liquidationFeeRate),
      ],
    );

    return new PrivatePool__riskCloseResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBoolean(),
    );
  }

  try_riskClose(
    _orderID: BigInt,
    _number: BigInt,
    _fundingFee: BigInt,
    _profit: BigInt,
    _openPrice: BigInt,
    _currPrice: BigInt,
    _liquidationFeeRate: BigInt,
  ): ethereum.CallResult<PrivatePool__riskCloseResult> {
    let result = super.tryCall(
      "riskClose",
      "riskClose(uint256,uint256,uint256,uint256,uint256,uint256,uint256):(bool,uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_orderID),
        ethereum.Value.fromUnsignedBigInt(_number),
        ethereum.Value.fromUnsignedBigInt(_fundingFee),
        ethereum.Value.fromUnsignedBigInt(_profit),
        ethereum.Value.fromUnsignedBigInt(_openPrice),
        ethereum.Value.fromUnsignedBigInt(_currPrice),
        ethereum.Value.fromUnsignedBigInt(_liquidationFeeRate),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PrivatePool__riskCloseResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBoolean(),
      ),
    );
  }

  getMarginAmount(_orderID: BigInt): PrivatePool__getMarginAmountResult {
    let result = super.call(
      "getMarginAmount",
      "getMarginAmount(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_orderID)],
    );

    return new PrivatePool__getMarginAmountResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_getMarginAmount(
    _orderID: BigInt,
  ): ethereum.CallResult<PrivatePool__getMarginAmountResult> {
    let result = super.tryCall(
      "getMarginAmount",
      "getMarginAmount(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_orderID)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PrivatePool__getMarginAmountResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  getMakerLiquidityOrders(
    _makerOrderIDs: Array<BigInt>,
  ): Array<PrivatePool__getMakerLiquidityOrdersResultListStruct> {
    let result = super.call(
      "getMakerLiquidityOrders",
      "getMakerLiquidityOrders(uint256[]):((uint256,uint256,uint256,uint256,address,bool)[])",
      [ethereum.Value.fromUnsignedBigIntArray(_makerOrderIDs)],
    );

    return result[0].toTupleArray<PrivatePool__getMakerLiquidityOrdersResultListStruct>();
  }

  try_getMakerLiquidityOrders(
    _makerOrderIDs: Array<BigInt>,
  ): ethereum.CallResult<
    Array<PrivatePool__getMakerLiquidityOrdersResultListStruct>
  > {
    let result = super.tryCall(
      "getMakerLiquidityOrders",
      "getMakerLiquidityOrders(uint256[]):((uint256,uint256,uint256,uint256,address,bool)[])",
      [ethereum.Value.fromUnsignedBigIntArray(_makerOrderIDs)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<PrivatePool__getMakerLiquidityOrdersResultListStruct>(),
    );
  }

  getMakerLength(): BigInt {
    let result = super.call("getMakerLength", "getMakerLength():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getMakerLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMakerLength",
      "getMakerLength():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMakerList(_index: BigInt, _limit: BigInt): Array<Address> {
    let result = super.call(
      "getMakerList",
      "getMakerList(uint256,uint256):(address[])",
      [
        ethereum.Value.fromUnsignedBigInt(_index),
        ethereum.Value.fromUnsignedBigInt(_limit),
      ],
    );

    return result[0].toAddressArray();
  }

  try_getMakerList(
    _index: BigInt,
    _limit: BigInt,
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getMakerList",
      "getMakerList(uint256,uint256):(address[])",
      [
        ethereum.Value.fromUnsignedBigInt(_index),
        ethereum.Value.fromUnsignedBigInt(_limit),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getMakerOrderLength(): BigInt {
    let result = super.call(
      "getMakerOrderLength",
      "getMakerOrderLength():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getMakerOrderLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMakerOrderLength",
      "getMakerOrderLength():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMakerOrderList(
    _index: BigInt,
    _limit: BigInt,
  ): Array<PrivatePool__getMakerOrderListResultListStruct> {
    let result = super.call(
      "getMakerOrderList",
      "getMakerOrderList(uint256,uint256):((uint256,uint256,uint256,uint256,address,bool)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_index),
        ethereum.Value.fromUnsignedBigInt(_limit),
      ],
    );

    return result[0].toTupleArray<PrivatePool__getMakerOrderListResultListStruct>();
  }

  try_getMakerOrderList(
    _index: BigInt,
    _limit: BigInt,
  ): ethereum.CallResult<
    Array<PrivatePool__getMakerOrderListResultListStruct>
  > {
    let result = super.tryCall(
      "getMakerOrderList",
      "getMakerOrderList(uint256,uint256):((uint256,uint256,uint256,uint256,address,bool)[])",
      [
        ethereum.Value.fromUnsignedBigInt(_index),
        ethereum.Value.fromUnsignedBigInt(_limit),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<PrivatePool__getMakerOrderListResultListStruct>(),
    );
  }

  getMatchIds(_ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "getMatchIds",
      "getMatchIds(uint256[]):(uint256[])",
      [ethereum.Value.fromUnsignedBigIntArray(_ids)],
    );

    return result[0].toBigIntArray();
  }

  try_getMatchIds(_ids: Array<BigInt>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getMatchIds",
      "getMatchIds(uint256[]):(uint256[])",
      [ethereum.Value.fromUnsignedBigIntArray(_ids)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getRiskFundAmount(): BigInt {
    let result = super.call(
      "getRiskFundAmount",
      "getRiskFundAmount():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getRiskFundAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRiskFundAmount",
      "getRiskFundAmount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _publicPool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _riskFundAddr(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class AddLiquidityCall extends ethereum.Call {
  get inputs(): AddLiquidityCall__Inputs {
    return new AddLiquidityCall__Inputs(this);
  }

  get outputs(): AddLiquidityCall__Outputs {
    return new AddLiquidityCall__Outputs(this);
  }
}

export class AddLiquidityCall__Inputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AddLiquidityCall__Outputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }
}

export class AddLiquidityForCall extends ethereum.Call {
  get inputs(): AddLiquidityForCall__Inputs {
    return new AddLiquidityForCall__Inputs(this);
  }

  get outputs(): AddLiquidityForCall__Outputs {
    return new AddLiquidityForCall__Outputs(this);
  }
}

export class AddLiquidityForCall__Inputs {
  _call: AddLiquidityForCall;

  constructor(call: AddLiquidityForCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddLiquidityForCall__Outputs {
  _call: AddLiquidityForCall;

  constructor(call: AddLiquidityForCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class MatchOrderCall extends ethereum.Call {
  get inputs(): MatchOrderCall__Inputs {
    return new MatchOrderCall__Inputs(this);
  }

  get outputs(): MatchOrderCall__Outputs {
    return new MatchOrderCall__Outputs(this);
  }
}

export class MatchOrderCall__Inputs {
  _call: MatchOrderCall;

  constructor(call: MatchOrderCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _marginAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _marginFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _maker(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class MatchOrderCall__Outputs {
  _call: MatchOrderCall;

  constructor(call: MatchOrderCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CloseCall extends ethereum.Call {
  get inputs(): CloseCall__Inputs {
    return new CloseCall__Inputs(this);
  }

  get outputs(): CloseCall__Outputs {
    return new CloseCall__Outputs(this);
  }
}

export class CloseCall__Inputs {
  _call: CloseCall;

  constructor(call: CloseCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _profit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _fundingFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CloseCall__Outputs {
  _call: CloseCall;

  constructor(call: CloseCall) {
    this._call = call;
  }

  get userProfit(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get isAgreement(): boolean {
    return this._call.outputValues[1].value.toBoolean();
  }
}

export class RiskCloseCall extends ethereum.Call {
  get inputs(): RiskCloseCall__Inputs {
    return new RiskCloseCall__Inputs(this);
  }

  get outputs(): RiskCloseCall__Outputs {
    return new RiskCloseCall__Outputs(this);
  }
}

export class RiskCloseCall__Inputs {
  _call: RiskCloseCall;

  constructor(call: RiskCloseCall) {
    this._call = call;
  }

  get _orderID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _number(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _fundingFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _profit(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _openPrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _currPrice(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _liquidationFeeRate(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class RiskCloseCall__Outputs {
  _call: RiskCloseCall;

  constructor(call: RiskCloseCall) {
    this._call = call;
  }

  get flag(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get userProfit(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get isAgreement(): boolean {
    return this._call.outputValues[2].value.toBoolean();
  }
}

export class AddMarginAmountCall extends ethereum.Call {
  get inputs(): AddMarginAmountCall__Inputs {
    return new AddMarginAmountCall__Inputs(this);
  }

  get outputs(): AddMarginAmountCall__Outputs {
    return new AddMarginAmountCall__Outputs(this);
  }
}

export class AddMarginAmountCall__Inputs {
  _call: AddMarginAmountCall;

  constructor(call: AddMarginAmountCall) {
    this._call = call;
  }

  get _orderID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddMarginAmountCall__Outputs {
  _call: AddMarginAmountCall;

  constructor(call: AddMarginAmountCall) {
    this._call = call;
  }
}

export class SetMakerInfoCall extends ethereum.Call {
  get inputs(): SetMakerInfoCall__Inputs {
    return new SetMakerInfoCall__Inputs(this);
  }

  get outputs(): SetMakerInfoCall__Outputs {
    return new SetMakerInfoCall__Outputs(this);
  }
}

export class SetMakerInfoCall__Inputs {
  _call: SetMakerInfoCall;

  constructor(call: SetMakerInfoCall) {
    this._call = call;
  }

  get _isRejectOrder(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get _isExclusive(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetMakerInfoCall__Outputs {
  _call: SetMakerInfoCall;

  constructor(call: SetMakerInfoCall) {
    this._call = call;
  }
}

export class SetRiskFundAddrCall extends ethereum.Call {
  get inputs(): SetRiskFundAddrCall__Inputs {
    return new SetRiskFundAddrCall__Inputs(this);
  }

  get outputs(): SetRiskFundAddrCall__Outputs {
    return new SetRiskFundAddrCall__Outputs(this);
  }
}

export class SetRiskFundAddrCall__Inputs {
  _call: SetRiskFundAddrCall;

  constructor(call: SetRiskFundAddrCall) {
    this._call = call;
  }

  get _riskFundAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRiskFundAddrCall__Outputs {
  _call: SetRiskFundAddrCall;

  constructor(call: SetRiskFundAddrCall) {
    this._call = call;
  }
}

export class SetPublicPoolAddrCall extends ethereum.Call {
  get inputs(): SetPublicPoolAddrCall__Inputs {
    return new SetPublicPoolAddrCall__Inputs(this);
  }

  get outputs(): SetPublicPoolAddrCall__Outputs {
    return new SetPublicPoolAddrCall__Outputs(this);
  }
}

export class SetPublicPoolAddrCall__Inputs {
  _call: SetPublicPoolAddrCall;

  constructor(call: SetPublicPoolAddrCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPublicPoolAddrCall__Outputs {
  _call: SetPublicPoolAddrCall;

  constructor(call: SetPublicPoolAddrCall) {
    this._call = call;
  }
}

export class SetKeeperCall extends ethereum.Call {
  get inputs(): SetKeeperCall__Inputs {
    return new SetKeeperCall__Inputs(this);
  }

  get outputs(): SetKeeperCall__Outputs {
    return new SetKeeperCall__Outputs(this);
  }
}

export class SetKeeperCall__Inputs {
  _call: SetKeeperCall;

  constructor(call: SetKeeperCall) {
    this._call = call;
  }

  get _keeperAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetKeeperCall__Outputs {
  _call: SetKeeperCall;

  constructor(call: SetKeeperCall) {
    this._call = call;
  }
}
