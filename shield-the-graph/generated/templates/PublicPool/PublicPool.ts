// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AddLiquidity extends ethereum.Event {
  get params(): AddLiquidity__Params {
    return new AddLiquidity__Params(this);
  }
}

export class AddLiquidity__Params {
  _event: AddLiquidity;

  constructor(event: AddLiquidity) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get minted(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CloseInPublicPool extends ethereum.Event {
  get params(): CloseInPublicPool__Params {
    return new CloseInPublicPool__Params(this);
  }
}

export class CloseInPublicPool__Params {
  _event: CloseInPublicPool;

  constructor(event: CloseInPublicPool) {
    this._event = event;
  }

  get makerID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get orderID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get userProfit(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MatchWithPublicPool extends ethereum.Event {
  get params(): MatchWithPublicPool__Params {
    return new MatchWithPublicPool__Params(this);
  }
}

export class MatchWithPublicPool__Params {
  _event: MatchWithPublicPool;

  constructor(event: MatchWithPublicPool) {
    this._event = event;
  }

  get orderID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get makerID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get marginAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get marginFee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class MoveToPublic extends ethereum.Event {
  get params(): MoveToPublic__Params {
    return new MoveToPublic__Params(this);
  }
}

export class MoveToPublic__Params {
  _event: MoveToPublic;

  constructor(event: MoveToPublic) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get profit(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get moveProfit(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get openPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get movePrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RiskInPubicPool extends ethereum.Event {
  get params(): RiskInPubicPool__Params {
    return new RiskInPubicPool__Params(this);
  }
}

export class RiskInPubicPool__Params {
  _event: RiskInPubicPool;

  constructor(event: RiskInPubicPool) {
    this._event = event;
  }

  get makerID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get orderID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get userProfit(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PublicPool__lockedLiquidityResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: Address;
  value5: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: Address,
    value5: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }

  getTakerId(): BigInt {
    return this.value0;
  }

  getMarginAmount(): BigInt {
    return this.value1;
  }

  getMarginFee(): BigInt {
    return this.value2;
  }

  getChangePrice(): BigInt {
    return this.value3;
  }

  getMakerAddr(): Address {
    return this.value4;
  }

  getLocked(): boolean {
    return this.value5;
  }
}

export class PublicPool__publicPoolInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getDepositedAmount(): BigInt {
    return this.value0;
  }

  getLockedAmount(): BigInt {
    return this.value1;
  }

  getAvailableAmount(): BigInt {
    return this.value2;
  }
}

export class PublicPool__closeResult {
  value0: BigInt;
  value1: boolean;

  constructor(value0: BigInt, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }

  get_userProfit(): BigInt {
    return this.value0;
  }

  get_isAgreement(): boolean {
    return this.value1;
  }
}

export class PublicPool__riskCloseResult {
  value0: boolean;
  value1: BigInt;
  value2: boolean;

  constructor(value0: boolean, value1: BigInt, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }

  get_flag(): boolean {
    return this.value0;
  }

  get_userProfit(): BigInt {
    return this.value1;
  }

  get_isAgreement(): boolean {
    return this.value2;
  }
}

export class PublicPool__getLockedAmountResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getMarginFee(): BigInt {
    return this.value0;
  }

  getLiquidationFee(): BigInt {
    return this.value1;
  }
}

export class PublicPool__getMarginAmountResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getMarginAmount(): BigInt {
    return this.value0;
  }

  getMarginFee(): BigInt {
    return this.value1;
  }
}

export class PublicPool extends ethereum.SmartContract {
  static bind(address: Address): PublicPool {
    return new PublicPool("PublicPool", address);
  }

  addressIndex(param0: Address): BigInt {
    let result = super.call("addressIndex", "addressIndex(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_addressIndex(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addressIndex",
      "addressIndex(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)],
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  appendRate(): BigInt {
    let result = super.call("appendRate", "appendRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_appendRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("appendRate", "appendRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue),
      ],
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  formula(): Address {
    let result = super.call("formula", "formula():(address)", []);

    return result[0].toAddress();
  }

  try_formula(): ethereum.CallResult<Address> {
    let result = super.tryCall("formula", "formula():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue),
      ],
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  keeperMap(param0: Address): boolean {
    let result = super.call("keeperMap", "keeperMap(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_keeperMap(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("keeperMap", "keeperMap(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lockedLiquidity(param0: BigInt): PublicPool__lockedLiquidityResult {
    let result = super.call(
      "lockedLiquidity",
      "lockedLiquidity(uint256):(uint256,uint256,uint256,uint256,address,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new PublicPool__lockedLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBoolean(),
    );
  }

  try_lockedLiquidity(
    param0: BigInt,
  ): ethereum.CallResult<PublicPool__lockedLiquidityResult> {
    let result = super.tryCall(
      "lockedLiquidity",
      "lockedLiquidity(uint256):(uint256,uint256,uint256,uint256,address,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PublicPool__lockedLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBoolean(),
      ),
    );
  }

  matchIds(param0: BigInt): BigInt {
    let result = super.call("matchIds", "matchIds(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBigInt();
  }

  try_matchIds(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("matchIds", "matchIds(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  privatePools(param0: Address): boolean {
    let result = super.call("privatePools", "privatePools(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_privatePools(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("privatePools", "privatePools(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  publicPoolInfo(): PublicPool__publicPoolInfoResult {
    let result = super.call(
      "publicPoolInfo",
      "publicPoolInfo():(uint256,uint256,uint256)",
      [],
    );

    return new PublicPool__publicPoolInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
    );
  }

  try_publicPoolInfo(): ethereum.CallResult<PublicPool__publicPoolInfoResult> {
    let result = super.tryCall(
      "publicPoolInfo",
      "publicPoolInfo():(uint256,uint256,uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PublicPool__publicPoolInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
      ),
    );
  }

  riskFundAddr(): Address {
    let result = super.call("riskFundAddr", "riskFundAddr():(address)", []);

    return result[0].toAddress();
  }

  try_riskFundAddr(): ethereum.CallResult<Address> {
    let result = super.tryCall("riskFundAddr", "riskFundAddr():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenAddress(): Address {
    let result = super.call("tokenAddress", "tokenAddress():(address)", []);

    return result[0].toAddress();
  }

  try_tokenAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenAddress", "tokenAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isKeeper(_addr: Address): boolean {
    let result = super.call("isKeeper", "isKeeper(address):(bool)", [
      ethereum.Value.fromAddress(_addr),
    ]);

    return result[0].toBoolean();
  }

  try_isKeeper(_addr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isKeeper", "isKeeper(address):(bool)", [
      ethereum.Value.fromAddress(_addr),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPrivatePool(_addr: Address): boolean {
    let result = super.call("isPrivatePool", "isPrivatePool(address):(bool)", [
      ethereum.Value.fromAddress(_addr),
    ]);

    return result[0].toBoolean();
  }

  try_isPrivatePool(_addr: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isPrivatePool",
      "isPrivatePool(address):(bool)",
      [ethereum.Value.fromAddress(_addr)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  addLiquidity(_mintAmount: BigInt): BigInt {
    let result = super.call("addLiquidity", "addLiquidity(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_mintAmount),
    ]);

    return result[0].toBigInt();
  }

  try_addLiquidity(_mintAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addLiquidity",
      "addLiquidity(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_mintAmount)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addLiquidityFor(_mintAmount: BigInt, _user: Address): BigInt {
    let result = super.call(
      "addLiquidityFor",
      "addLiquidityFor(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_mintAmount),
        ethereum.Value.fromAddress(_user),
      ],
    );

    return result[0].toBigInt();
  }

  try_addLiquidityFor(
    _mintAmount: BigInt,
    _user: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addLiquidityFor",
      "addLiquidityFor(uint256,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_mintAmount),
        ethereum.Value.fromAddress(_user),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdraw(_lpAmount: BigInt): BigInt {
    let result = super.call("withdraw", "withdraw(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_lpAmount),
    ]);

    return result[0].toBigInt();
  }

  try_withdraw(_lpAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("withdraw", "withdraw(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_lpAmount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  matchOrder(_id: BigInt, _marginAmount: BigInt, _marginFee: BigInt): boolean {
    let result = super.call(
      "matchOrder",
      "matchOrder(uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromUnsignedBigInt(_marginAmount),
        ethereum.Value.fromUnsignedBigInt(_marginFee),
      ],
    );

    return result[0].toBoolean();
  }

  try_matchOrder(
    _id: BigInt,
    _marginAmount: BigInt,
    _marginFee: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "matchOrder",
      "matchOrder(uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromUnsignedBigInt(_marginAmount),
        ethereum.Value.fromUnsignedBigInt(_marginFee),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  moveFromPrivatePool(
    _orderID: BigInt,
    _profit: BigInt,
    _moveProfit: BigInt,
    _number: BigInt,
    _openPrice: BigInt,
    _movePrice: BigInt,
  ): boolean {
    let result = super.call(
      "moveFromPrivatePool",
      "moveFromPrivatePool(uint256,uint256,uint256,uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_orderID),
        ethereum.Value.fromUnsignedBigInt(_profit),
        ethereum.Value.fromUnsignedBigInt(_moveProfit),
        ethereum.Value.fromUnsignedBigInt(_number),
        ethereum.Value.fromUnsignedBigInt(_openPrice),
        ethereum.Value.fromUnsignedBigInt(_movePrice),
      ],
    );

    return result[0].toBoolean();
  }

  try_moveFromPrivatePool(
    _orderID: BigInt,
    _profit: BigInt,
    _moveProfit: BigInt,
    _number: BigInt,
    _openPrice: BigInt,
    _movePrice: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "moveFromPrivatePool",
      "moveFromPrivatePool(uint256,uint256,uint256,uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_orderID),
        ethereum.Value.fromUnsignedBigInt(_profit),
        ethereum.Value.fromUnsignedBigInt(_moveProfit),
        ethereum.Value.fromUnsignedBigInt(_number),
        ethereum.Value.fromUnsignedBigInt(_openPrice),
        ethereum.Value.fromUnsignedBigInt(_movePrice),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  close(
    _id: BigInt,
    _profit: BigInt,
    _fundingFee: BigInt,
  ): PublicPool__closeResult {
    let result = super.call(
      "close",
      "close(uint256,uint256,uint256):(uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromUnsignedBigInt(_profit),
        ethereum.Value.fromUnsignedBigInt(_fundingFee),
      ],
    );

    return new PublicPool__closeResult(
      result[0].toBigInt(),
      result[1].toBoolean(),
    );
  }

  try_close(
    _id: BigInt,
    _profit: BigInt,
    _fundingFee: BigInt,
  ): ethereum.CallResult<PublicPool__closeResult> {
    let result = super.tryCall(
      "close",
      "close(uint256,uint256,uint256):(uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromUnsignedBigInt(_profit),
        ethereum.Value.fromUnsignedBigInt(_fundingFee),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PublicPool__closeResult(value[0].toBigInt(), value[1].toBoolean()),
    );
  }

  riskClose(
    _id: BigInt,
    _profit: BigInt,
    _fundingFee: BigInt,
  ): PublicPool__riskCloseResult {
    let result = super.call(
      "riskClose",
      "riskClose(uint256,uint256,uint256):(bool,uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromUnsignedBigInt(_profit),
        ethereum.Value.fromUnsignedBigInt(_fundingFee),
      ],
    );

    return new PublicPool__riskCloseResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBoolean(),
    );
  }

  try_riskClose(
    _id: BigInt,
    _profit: BigInt,
    _fundingFee: BigInt,
  ): ethereum.CallResult<PublicPool__riskCloseResult> {
    let result = super.tryCall(
      "riskClose",
      "riskClose(uint256,uint256,uint256):(bool,uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromUnsignedBigInt(_profit),
        ethereum.Value.fromUnsignedBigInt(_fundingFee),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PublicPool__riskCloseResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBoolean(),
      ),
    );
  }

  getMintLPTokenAmount(_mintAmount: BigInt): BigInt {
    let result = super.call(
      "getMintLPTokenAmount",
      "getMintLPTokenAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_mintAmount)],
    );

    return result[0].toBigInt();
  }

  try_getMintLPTokenAmount(_mintAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMintLPTokenAmount",
      "getMintLPTokenAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_mintAmount)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenAmountByLPToken(_lpAmount: BigInt): BigInt {
    let result = super.call(
      "getTokenAmountByLPToken",
      "getTokenAmountByLPToken(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_lpAmount)],
    );

    return result[0].toBigInt();
  }

  try_getTokenAmountByLPToken(_lpAmount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenAmountByLPToken",
      "getTokenAmountByLPToken(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_lpAmount)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLockedAmount(
    _amount: BigInt,
    _currentPrice: BigInt,
    _poolType: BigInt,
  ): PublicPool__getLockedAmountResult {
    let result = super.call(
      "getLockedAmount",
      "getLockedAmount(uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_currentPrice),
        ethereum.Value.fromUnsignedBigInt(_poolType),
      ],
    );

    return new PublicPool__getLockedAmountResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_getLockedAmount(
    _amount: BigInt,
    _currentPrice: BigInt,
    _poolType: BigInt,
  ): ethereum.CallResult<PublicPool__getLockedAmountResult> {
    let result = super.tryCall(
      "getLockedAmount",
      "getLockedAmount(uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_currentPrice),
        ethereum.Value.fromUnsignedBigInt(_poolType),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PublicPool__getLockedAmountResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  getMarginAmount(_orderID: BigInt): PublicPool__getMarginAmountResult {
    let result = super.call(
      "getMarginAmount",
      "getMarginAmount(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_orderID)],
    );

    return new PublicPool__getMarginAmountResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_getMarginAmount(
    _orderID: BigInt,
  ): ethereum.CallResult<PublicPool__getMarginAmountResult> {
    let result = super.tryCall(
      "getMarginAmount",
      "getMarginAmount(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_orderID)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PublicPool__getMarginAmountResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  getRiskFundAmount(): BigInt {
    let result = super.call(
      "getRiskFundAmount",
      "getRiskFundAmount():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getRiskFundAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRiskFundAmount",
      "getRiskFundAmount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _riskFundAddr(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _formula(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class SetKeeperCall extends ethereum.Call {
  get inputs(): SetKeeperCall__Inputs {
    return new SetKeeperCall__Inputs(this);
  }

  get outputs(): SetKeeperCall__Outputs {
    return new SetKeeperCall__Outputs(this);
  }
}

export class SetKeeperCall__Inputs {
  _call: SetKeeperCall;

  constructor(call: SetKeeperCall) {
    this._call = call;
  }

  get _addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _auth(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetKeeperCall__Outputs {
  _call: SetKeeperCall;

  constructor(call: SetKeeperCall) {
    this._call = call;
  }
}

export class SetPrivatePoolCall extends ethereum.Call {
  get inputs(): SetPrivatePoolCall__Inputs {
    return new SetPrivatePoolCall__Inputs(this);
  }

  get outputs(): SetPrivatePoolCall__Outputs {
    return new SetPrivatePoolCall__Outputs(this);
  }
}

export class SetPrivatePoolCall__Inputs {
  _call: SetPrivatePoolCall;

  constructor(call: SetPrivatePoolCall) {
    this._call = call;
  }

  get _addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _auth(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetPrivatePoolCall__Outputs {
  _call: SetPrivatePoolCall;

  constructor(call: SetPrivatePoolCall) {
    this._call = call;
  }
}

export class AddLiquidityCall extends ethereum.Call {
  get inputs(): AddLiquidityCall__Inputs {
    return new AddLiquidityCall__Inputs(this);
  }

  get outputs(): AddLiquidityCall__Outputs {
    return new AddLiquidityCall__Outputs(this);
  }
}

export class AddLiquidityCall__Inputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get _mintAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AddLiquidityCall__Outputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get minted(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AddLiquidityForCall extends ethereum.Call {
  get inputs(): AddLiquidityForCall__Inputs {
    return new AddLiquidityForCall__Inputs(this);
  }

  get outputs(): AddLiquidityForCall__Outputs {
    return new AddLiquidityForCall__Outputs(this);
  }
}

export class AddLiquidityForCall__Inputs {
  _call: AddLiquidityForCall;

  constructor(call: AddLiquidityForCall) {
    this._call = call;
  }

  get _mintAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _user(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddLiquidityForCall__Outputs {
  _call: AddLiquidityForCall;

  constructor(call: AddLiquidityForCall) {
    this._call = call;
  }

  get minted(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _lpAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _tokenAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MatchOrderCall extends ethereum.Call {
  get inputs(): MatchOrderCall__Inputs {
    return new MatchOrderCall__Inputs(this);
  }

  get outputs(): MatchOrderCall__Outputs {
    return new MatchOrderCall__Outputs(this);
  }
}

export class MatchOrderCall__Inputs {
  _call: MatchOrderCall;

  constructor(call: MatchOrderCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _marginAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _marginFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MatchOrderCall__Outputs {
  _call: MatchOrderCall;

  constructor(call: MatchOrderCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MoveFromPrivatePoolCall extends ethereum.Call {
  get inputs(): MoveFromPrivatePoolCall__Inputs {
    return new MoveFromPrivatePoolCall__Inputs(this);
  }

  get outputs(): MoveFromPrivatePoolCall__Outputs {
    return new MoveFromPrivatePoolCall__Outputs(this);
  }
}

export class MoveFromPrivatePoolCall__Inputs {
  _call: MoveFromPrivatePoolCall;

  constructor(call: MoveFromPrivatePoolCall) {
    this._call = call;
  }

  get _orderID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _profit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _moveProfit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _number(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _openPrice(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _movePrice(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class MoveFromPrivatePoolCall__Outputs {
  _call: MoveFromPrivatePoolCall;

  constructor(call: MoveFromPrivatePoolCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CloseCall extends ethereum.Call {
  get inputs(): CloseCall__Inputs {
    return new CloseCall__Inputs(this);
  }

  get outputs(): CloseCall__Outputs {
    return new CloseCall__Outputs(this);
  }
}

export class CloseCall__Inputs {
  _call: CloseCall;

  constructor(call: CloseCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _profit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _fundingFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CloseCall__Outputs {
  _call: CloseCall;

  constructor(call: CloseCall) {
    this._call = call;
  }

  get _userProfit(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get _isAgreement(): boolean {
    return this._call.outputValues[1].value.toBoolean();
  }
}

export class RiskCloseCall extends ethereum.Call {
  get inputs(): RiskCloseCall__Inputs {
    return new RiskCloseCall__Inputs(this);
  }

  get outputs(): RiskCloseCall__Outputs {
    return new RiskCloseCall__Outputs(this);
  }
}

export class RiskCloseCall__Inputs {
  _call: RiskCloseCall;

  constructor(call: RiskCloseCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _profit(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _fundingFee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RiskCloseCall__Outputs {
  _call: RiskCloseCall;

  constructor(call: RiskCloseCall) {
    this._call = call;
  }

  get _flag(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get _userProfit(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get _isAgreement(): boolean {
    return this._call.outputValues[2].value.toBoolean();
  }
}

export class SetAppendRateCall extends ethereum.Call {
  get inputs(): SetAppendRateCall__Inputs {
    return new SetAppendRateCall__Inputs(this);
  }

  get outputs(): SetAppendRateCall__Outputs {
    return new SetAppendRateCall__Outputs(this);
  }
}

export class SetAppendRateCall__Inputs {
  _call: SetAppendRateCall;

  constructor(call: SetAppendRateCall) {
    this._call = call;
  }

  get _appendRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetAppendRateCall__Outputs {
  _call: SetAppendRateCall;

  constructor(call: SetAppendRateCall) {
    this._call = call;
  }
}
